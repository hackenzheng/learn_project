## 数据结构
   基础的数据结构sds,双向链表,字典(两个hash表),ziplist, skiplist,整数集合(整数数组)，在此基础上再形成对象。
   在redis里面，每个key,每个val都会再抽象成redis object,而非直接用基础的数据结构。
   
   skiplist跳表，底层就是链表，链表的每个元素有一个level数组，数组中每个元素是指向skiplistnode的指针。跳表在redis里面
   只作为zset和内部数据结构。 
   
   ziplist相比于链表的优势，除了头部和尾部几个额外的空间外，不需要给每个元素在分配指针变量，另外是连续分配的内存，不会造成内存碎片化。
   在redis4.0的版本后面又增加了quiclist，结合ziplist和链表，即用链表的形式将每个小的ziplist连起来。
   
   ziplist没有用struct去定义一个结构，只定义了创建，插入元素等接口。创建的时候就是malloc(headersize+1)的空间，然后对这个空间调用
   宏进行初始化。
   
       #define ZIPLIST_HEADER_SIZE     (sizeof(uint32_t)*2+sizeof(uint16_t))
       //即ZIPLIST_HEADER_SIZE=zlbytes(4)+zltail(4)+zllen(2)
       unsigned char *ziplistNew(void)
       {
       unsigned int bytes = ZIPLIST_HEADER_SIZE+1;//1字节的zlend
       unsigned char *zl = zmalloc(bytes); //分配内存
       ZIPLIST_BYTES(zl) = intrev32ifbe(bytes);//初始化各字段
       ZIPLIST_TAIL_OFFSET(zl) = intrev32ifbe(ZIPLIST_HEADER_SIZE);
       ZIPLIST_LENGTH(zl) = 0;
       zl[bytes-1] = ZIP_END; //ZIP_END=0xFF
       return zl;//返回ziplist的起始地址
       }
   
   
   
   ziplist的插入是插入到最后，要插入新的元素就比要重新分配内存
   
   ziplist不适合存储太多元素， 原因有访问只能是遍历，从头或从尾开始遍历，元素一多遍历时间就长。
   二是元素一多，增删等操作的维护成本太高， 需要重新分配内存，拷贝数据。
   不适合存储大型字符串也是一样原因，字符串一大占据的空间就大，维护时内存分配和数据拷贝的时间就长。
   
   级联更新，因为每个元素记录了前一个元素的长度，且为了节约内存长度是变长的，当前一个元素跨了长度界限后存储长度的变量需要更新，
   会导致后面的每个元素都可能会更新。
   
   
   zset的实现方式有两种，数据量小的时候是ziplist,大的时候是skiplist+dict，用dict直接保存元素和score的关系，这样根据
   元素获取score的复杂度是o(1)，非常高效。 并且dict和skiplist是共享元素对象的和分数，并不会多耗费很多空间。共享的方式是，
   元素本身robj对象，skiplistNode中的指针robj *obj;直接指向它，dict中的key对象也直接指向它。而分数是绑定在skiplistNode上的，
   dict中在指向这个分数。

   zset结构体的定义只有一种dict+skiplist,是在robj里面实现的不同底层结构。如果robj里面的encoding是ziplist，ptr就指向ziplist,
   如果是skiplist,ptr就指向zset结构。
   
       typedef struct zset{
            dict *dict;
            zskiplist *zsl;
       }zset;
   
   zset中第一个节点的rank是1而不是0，加入zset1里有1,one; 2 two; 3 three; 三个元素，zrank zset1 one返回的是1而不是0.
   但是zrange的计数却是从0开始。zrange zset1 start stop的时间复杂度是log(n) + stop-start.实现过程是先根据rank start找到
   对应的元素的位置，然后再往前走。根据rank找元素的时间复杂度平均是log(n),最差是n，过程是从第一个节点的最上层开始，直接根据span判断。
   根据分值和成员对象查找在跳跃表中的排位的复杂度平均log(n),最差是n，但是根据score做比较。 zset在数据量小于512且对象不大时用的是ziplist,
   这个时候只能从头开始遍历，复杂度是stop.
   
   当zset的所有score是一样的时候，查找性能是否会退化为O(n)？不会的，因为还会根据val排序。
    
   zset也可以看做是一个特殊的dict, 不过val只能是score数值，根据val排序。现在要实现一个有序字典，
   即key是有序存储的。首先会想到MySQL的索引就是这样，用的B+树，除了b+树还有字典树，
   那么redis中的rax结构就是这一实现。

   dict对象能够序列化成字符串，所以应用到底时候什么情况下用string什么情况下用dict要看场景。大体来说如果大部分的访问是要访问所有的filed,
   就用string，如果大部分的时候只需要访问少数的filed就用dict，访问效率更高。  更新多也要看场景，如果更新很频繁，但每次都要把所有的field修改，
   直接用string覆盖也比较快。 json的序列化和反序列化的影响有，但是不大。
   https://stackoverflow.com/questions/16375188/redis-strings-vs-redis-hashes-to-represent-json-efficiency
   
   redis中使用共享对象来节约存储空间，每个对象都有refcount,当为0时会启动内存回收机制。共享对象用到的地方有：
   全局的共享对象，比如返回值'OK'; zset中skiplist和dict的共享元素。
   
   Redis在3.0引入EMBSTR编码，这种编码和RAW编码都是用sdshdr简单动态字符串结构来表示。RAW编码会调用两次内存分配函数来分别
   创建redisObject和sdshdr结构，而EMBSTR只调用一次内存分配函数来分配一块连续的空间保存数据，比起RAW编码的字符串更能节省内存，
   以及能提升获取数据的速度。EMBSTR是不可修改的，当对EMBSTR编码的字符串执行任何修改命令，总会先将其转换成RAW编码再进行修改；
   代码在object.c/createEmbeddedStringObject()
   
       robj *createEmbeddedStringObject(char *ptr, size_t len) {
           robj *o = zmalloc(sizeof(robj)+sizeof(struct sdshdr)+len+1);    //虽是robj类型，但指向的内存是可以大于这个的
           struct sdshdr *sh = (void*)(o+1);    //o+1移动一个robj的长度，这样就到了sdshdr的开头
       
           o->type = REDIS_STRING;
           o->encoding = REDIS_ENCODING_EMBSTR;
           o->ptr = sh+1;
           o->refcount = 1;
           o->lru = LRU_CLOCK();
       
           sh->len = len;
           sh->free = 0;
           if (ptr) {
               memcpy(sh->buf,ptr,len);
               sh->buf[len] = '\0';
           } else {
               memset(sh->buf,0,len+1);
           }
           return o;
       }
   
   redis hash表的初始化:tabel初始化为NULL,其他变量初始化为0.也就是创建的时候是默认没有元素，然后一个个添加。
   在hasttb的基础上进一步封装得到dict,每个dict有两个hashtb,用于rehash扩容或缩容
   
   sort命令支持对list,set,zset操作，是把数据取出来之后再排序的，不会修改原有的数据。


   
## 应用
<Redis在京东到家的订单中的使用>
https://tech.imdada.cn/2017/06/30/daojia-redis/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io

redis作为缓存和数据库的一致性处理：
只要有多份数据就会有数据一致性的问题，先写数据库在写缓存，更新缓存失败时先重试，重试仍然不成功再用消息队列异步处理。

redis的分布式锁： 在版本2.6.12之前需要用setnx和expire两条指令实现，并且是非原子性。 之后就只要 SET key value [EX seconds] [NX].
解决了设置超时时间的原子问题，但是仍然存在锁的泄漏，即第一个用户拿到了锁，但在超时时间内没有释放锁，第二个用户又能继续拿到锁，导致重复拿锁。
解决方法：


redis的多字段排序： redis的zset只支持对score排序，score相同的在对key排序。如果有多字段的要求，根据业务，
可以考虑score设置为两个字段或多个字段的组合，且都只能是数值型的。 要是更复杂的多字段排序是不支持的。
参考<使用Redis的有序集合实现排行榜功能>:https://juejin.im/post/5c876854f265da2d9e179112

